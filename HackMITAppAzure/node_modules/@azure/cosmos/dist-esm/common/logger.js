import debugLib from "debug";
/** @hidden */
const cosmosLevelFilter = process.env.COSMOS_LOG_LEVEL || "warn|error";
/** @hidden */
const cosmosDebug = debugLib("cosmos");
/** @hidden */
const levelLogger = (namespaceLogger, level) => {
    return (message) => {
        if (cosmosLevelFilter.includes(level)) {
            namespaceLogger("[" + new Date().toISOString() + "][" + level + "]: %o", message);
        }
    };
};
/** @hidden */
export const logger = (namespace) => {
    const namespaceLogger = cosmosDebug.extend(namespace);
    return {
        silly: levelLogger(namespaceLogger, "silly"),
        debug: levelLogger(namespaceLogger, "debug"),
        info: levelLogger(namespaceLogger, "info"),
        warn: levelLogger(namespaceLogger, "warn"),
        error: levelLogger(namespaceLogger, "error")
    };
};
//# sourceMappingURL=logger.js.map